use crate::ast::{DataType, Ident};

#[derive(Debug, Clone, Copy)]
pub enum SQL {
    Access,
    LibreOfficeBase,
}

impl SQL {
    pub fn to_data_type(&self, data_type: &DataType) -> String {
        match self {
            Self::Access => access::to_data_type(data_type),
            Self::LibreOfficeBase => libre_office_base::to_data_type(data_type),
        }
    }

    pub fn to_column_ident(&self, ident: &Ident) -> String {
        match self {
            Self::Access => access::to_column_ident(ident),
            Self::LibreOfficeBase => libre_office_base::to_column_ident(ident),
        }
    }
}

mod access {
    use crate::ast::{DataType, Ident};

    pub fn to_data_type(data_type: &DataType) -> String {
        match data_type {
            DataType::Integer => "INTEGER".to_string(),
            DataType::AutoIncrement => "AUTOINCREMENT".to_string(),
            DataType::Float => "FLOAT".to_string(),
            DataType::Boolean => "YESNO".to_string(),
            DataType::Date => "DATE".to_string(),
            DataType::Time => "TIME".to_string(),
            DataType::DateTime => "DATETIME".to_string(),
            DataType::Varchar(n) => format!("VARCHAR({})", n),
        }
    }
    pub fn to_column_ident(ident: &Ident) -> String {
        format!("[{}]", ident.to_string())
    }
}

mod libre_office_base {
    use crate::ast::{DataType, Ident};

    // See http://www.hsqldb.org/doc/1.8/guide/guide.html#datatypes-section
    pub fn to_data_type(data_type: &DataType) -> String {
        match data_type {
            DataType::Integer => "INTEGER".to_string(),
            DataType::AutoIncrement => "INTEGER GENERATED BY DEFAULT AS IDENTITY".to_string(),
            DataType::Float => "FLOAT".to_string(),
            DataType::Boolean => "BOOLEAN".to_string(),
            DataType::Date => "DATE".to_string(),
            DataType::Time => "TIME".to_string(),
            DataType::DateTime => "DATETIME".to_string(),
            DataType::Varchar(n) => format!("VARCHAR({})", n),
        }
    }
    pub fn to_column_ident(ident: &Ident) -> String {
        ident.to_string()
    }
}
